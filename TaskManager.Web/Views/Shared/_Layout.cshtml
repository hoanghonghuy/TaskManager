<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - TaskManager</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" />
    <link rel="stylesheet" href="~/css/custom.css" asp-append-version="true" />
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
         
    <script>
        (function() {
            const storageKey = 'theme-preference';
            const savedTheme = localStorage.getItem(storageKey);
            const systemPrefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
            const theme = savedTheme ? savedTheme : (systemPrefersDark ? 'dark' : 'light');
            document.documentElement.className = 'theme-' + theme; 
        })();
    </script>

</head>
<body>
    @if (User.Identity!.IsAuthenticated)
    {
        @* Form này dùng để cung cấp AntiForgeryToken cho các thao tác JS *@
        <form id="antiForgeryForm" class="d-none">@Html.AntiForgeryToken()</form>
    }

    <div class="d-flex" style="height: 100vh;">
        <nav class="sidebar d-none d-md-block" id="sidebar">
            <a class="navbar-brand mb-4 d-block" asp-area="" asp-controller="Home" asp-action="Index">
                <i class="bi bi-check2-square me-2"></i>TaskManager
            </a>
            <ul class="nav flex-column gap-1">
                <li class="nav-item"><a class="nav-link" asp-controller="Home" asp-action="Index"><i class="bi bi-house me-2"></i>Trang chủ</a></li>
                @if (User.Identity!.IsAuthenticated)
                {
                    <li class="nav-item"><a class="nav-link" asp-controller="Tasks" asp-action="Index"><i class="bi bi-list-task me-2"></i>Công việc</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Calendar" asp-action="Index"><i class="bi bi-calendar-event me-2"></i>Lịch</a></li>
                    <li class="nav-item"><a class="nav-link" asp-controller="Projects" asp-action="Index"><i class="bi bi-folder me-2"></i>Danh sách</a></li>
                    @if (User.IsInRole("Admin"))
                    {
                        <li class="nav-item"><a class="nav-link" asp-controller="Users" asp-action="Index"><i class="bi bi-people-fill me-2"></i>Quản lý người dùng</a></li>
                    }
                }
            </ul>
        </nav>

        <div class="main-content flex-grow-1">
            <header class="d-flex justify-content-between align-items-center py-2 header-navbar">
                <div class="d-flex w-100 mx-3">
                    <form asp-controller="Tasks" asp-action="Index" method="get" class="d-flex w-100">
                        <input name="searchString" class="form-control me-2" type="text" placeholder="Tìm kiếm công việc...">
                        <button class="btn btn-secondary" type="submit">Tìm</button>
                    </form>
                </div>
                <ul class="navbar-nav ms-auto flex-row align-items-center me-3">
                    <li class="nav-item me-2">
                        <button class="btn btn-outline-secondary" id="ai-helper-button" data-bs-toggle="modal" data-bs-target="#aiHelperModal" title="Tạo công việc bằng AI">
                            <i class="bi bi-stars"></i>
                        </button>
                    </li>
                    @if (User.Identity!.IsAuthenticated)
                    {
                        <li class="nav-item dropdown">
                            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="bi bi-person-circle me-1"></i> @User.Identity.Name
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
                                <li><a class="dropdown-item" href="#" id="theme-switcher"><i class="bi bi-sun-fill me-2"></i><span>Giao diện sáng</span></a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item" asp-controller="Account" asp-action="Profile">Thông tin cá nhân</a></li>
                                <li><a class="dropdown-item" asp-controller="Account" asp-action="ChangePassword">Đổi mật khẩu</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li>
                                    <form asp-controller="Account" asp-action="Logout" method="post"><button type="submit" class="dropdown-item">Đăng xuất</button></form>
                                </li>
                            </ul>
                        </li>
                    }
                </ul>
            </header>

            @RenderBody()

        </div>

        <div id="task-details-panel" class="task-details-panel">
            <div class="d-flex justify-content-end mb-3">
                <button id="close-panel-btn" type="button" class="btn-close" aria-label="Close"></button>
            </div>
            <div id="task-details-content"></div>
        </div>
    </div>

    <div class="modal fade" id="aiHelperModal" tabindex="-1" aria-labelledby="aiHelperModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <form id="ai-form" asp-controller="AI" asp-action="parse-task" method="post">
                    <div class="modal-header">
                        <h5 class="modal-title" id="aiHelperModalLabel"><i class="bi bi-stars me-2"></i> Trợ lý AI</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p class="text-muted">Hãy mô tả công việc của bạn, ví dụ: "Họp team vào 4h chiều thứ sáu tuần này".</p>
                        <textarea id="ai-input-text" class="form-control" rows="3" placeholder="Nhập yêu cầu của bạn..."></textarea>
                        <div id="ai-spinner" class="text-center mt-3 d-none">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">Đang xử lý...</span>
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        <button type="submit" class="btn btn-primary" id="ai-submit-button">Tạo công việc</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    @* <script src="~/lib/jquery-ajax-unobtrusive/jquery.unobtrusive-ajax.min.js"></script> *@
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <partial name="_Notification" />

    <script>
        
        (function() {

            // --- Logic cho panel chi tiết công việc ---
            const panel = document.getElementById('task-details-panel');
            if (panel) {
                const detailsContent = document.getElementById('task-details-content');
                const mainContent = document.querySelector('.main-content');
                const closeBtn = document.getElementById('close-panel-btn');

                document.addEventListener('click', function(e) {
                    const viewLink = e.target.closest('.view-task-details');
                    if (viewLink) {
                        e.preventDefault();
                        const taskId = viewLink.dataset.taskId;

                        detailsContent.innerHTML = '<div class="text-center mt-5"><div class="spinner-border" role="status"><span class="visually-hidden">Loading...</span></div></div>';
                        panel.classList.add('show');
                        mainContent.classList.add('shift');

                        fetch(`/Tasks/Details/${taskId}?isPartial=true`)
                            .then(response => response.ok ? response.text() : Promise.reject('Network response was not ok.'))
                            .then(html => { detailsContent.innerHTML = html; })
                            .catch(error => {
                                console.error('Fetch error:', error);
                                detailsContent.innerHTML = '<div class="alert alert-danger">Không thể tải chi tiết công việc.</div>';
                            });
                    }
                });

                if (closeBtn) {
                    closeBtn.addEventListener('click', function() {
                        panel.classList.remove('show');
                        mainContent.classList.remove('shift');
                    });
                }
            }

            // --- Logic cho chuyển đổi theme ---
            const themeSwitcher = document.getElementById('theme-switcher');
            if(themeSwitcher) {
                const htmlEl = document.documentElement;
                const sunIcon = 'bi-sun-fill';
                const moonIcon = 'bi-moon-stars-fill';
                const storageKey = 'theme-preference';

                const updateSwitcherUI = (theme) => {
                     const icon = themeSwitcher.querySelector('i');
                    const textSpan = themeSwitcher.querySelector('span');
                    if (theme === 'dark') {
                        icon.className = `bi ${sunIcon} me-2`;
                        textSpan.textContent = 'Giao diện sáng';
                    } else {
                        icon.className = `bi ${moonIcon} me-2`;
                        textSpan.textContent = 'Giao diện tối';
                    }
                };

                themeSwitcher.addEventListener('click', (e) => {
                    e.preventDefault();
                    const currentTheme = localStorage.getItem(storageKey) || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
                    const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
                    htmlEl.className = 'theme-' + newTheme; // Đổi class trên <html>
                    localStorage.setItem(storageKey, newTheme); // Lưu lựa chọn
                    updateSwitcherUI(newTheme); // Cập nhật nút bấm
                });

                const initialTheme = localStorage.getItem(storageKey) || (window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light');
                updateSwitcherUI(initialTheme);
            }

            // --- Logic cho ô thêm nhanh công việc ---
            const quickAddTaskInput = document.getElementById('quick-add-task-title');
            if (quickAddTaskInput) {
                quickAddTaskInput.addEventListener('keypress', function(e) {
                    if (e.key === 'Enter') {
                        e.preventDefault();
                        const title = this.value.trim();

                        if (title) {
                            const form = document.createElement('form');
                            form.method = 'post';
                            form.action = '/Tasks/Create';

                            // Lấy token từ form đã được tạo sẵn
                            const tokenInput = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]');
                            if(tokenInput) {
                                form.appendChild(tokenInput.cloneNode(true));
                            }

                            const titleInput = document.createElement('input');
                            titleInput.type = 'hidden';
                            titleInput.name = 'Title';
                            titleInput.value = title;
                            form.appendChild(titleInput);

                            const priorityInput = document.createElement('input');
                            priorityInput.type = 'hidden';
                            priorityInput.name = 'Priority';
                            priorityInput.value = 'None';
                            form.appendChild(priorityInput);

                            document.body.appendChild(form);
                            form.submit();
                        }
                    }
                });
            }
            // --- Xử lý kết quả trả về từ ToggleTaskStatus ---
            $(document).on('submit', '.subtask-checkbox-form, .task-checkbox form', function(e) {
                e.preventDefault();
                var form = $(this);
                $.ajax({
                    url: form.attr('action'),
                    type: form.attr('method'),
                    data: form.serialize(),
                    success: function(response) {
                        if(response.success) {
                            // Cập nhật giao diện cho công việc/công việc con
                            $('#task-row-' + response.taskId + ', #subtask-item-' + response.taskId).toggleClass('task-completed subtask-completed');

                            // Đổi icon checkbox
                            var button = $('#task-row-' + response.taskId + ' .btn-check-task, #subtask-item-' + response.taskId + ' .btn-check-task');
                            var icon = button.find('i');
                            if(response.newStatus === 'Completed') {
                                icon.removeClass('bi-circle').addClass('bi-check-circle-fill');
                                button.closest('.task-item, .subtask-item').find('.task-title, .subtask-title').addClass('text-decoration-line-through');
                            } else {
                                icon.removeClass('bi-check-circle-fill').addClass('bi-circle');
                                 button.closest('.task-item, .subtask-item').find('.task-title, .subtask-title').removeClass('text-decoration-line-through');
                            }
                        }
                    }
                });
            });
            // -- Xử lý form bằng Fetch --
            document.addEventListener('submit', function(e) {
                // Xử lý form Thêm Subtask
                if (e.target.matches('#form-add-subtask')) {
                    e.preventDefault();
                    const form = e.target;
                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    })
                    .then(response => response.text())
                    .then(html => {
                        document.getElementById('subtask-list').insertAdjacentHTML('beforeend', html);
                        form.querySelector('input[name="Title"]').value = ''; // Xóa input
                    })
                    .catch(error => console.error('Error adding subtask:', error));
                }

                // Xử lý form Toggle Status (cả task chính và subtask)
                if (e.target.matches('.subtask-checkbox-form, .task-checkbox form')) {
                    e.preventDefault();
                    const form = e.target;
                    const formData = new FormData(form);
                    if (antiForgeryToken) {
                        formData.append('__RequestVerificationToken', antiForgeryToken);
                    }

                    fetch(form.action, { method: 'POST', body: formData })
                    .then(response => response.json())
                    .then(response => {
                        if (response.success) {
                            const targetRow = document.getElementById('task-row-' + response.taskId) || document.getElementById('subtask-item-' + response.taskId);
                            if(targetRow) {
                                targetRow.classList.toggle('task-completed');
                                targetRow.classList.toggle('subtask-completed');
                                const button = targetRow.querySelector('.btn-check-task');
                                const icon = button.querySelector('i');
                                const title = targetRow.querySelector('.task-title, .subtask-title');
                                if (response.newStatus === 'Completed') {
                                    icon.classList.remove('bi-circle');
                                    icon.classList.add('bi-check-circle-fill');
                                    if(title) title.classList.add('text-decoration-line-through');
                                } else {
                                    icon.classList.remove('bi-check-circle-fill');
                                    icon.classList.add('bi-circle');
                                    if(title) title.classList.remove('text-decoration-line-through');
                                }
                            }
                        }
                    })
                    .catch(error => console.error('Error toggling status:', error));
                }
                
            });

            // logic cho AI

            const aiSubmitButton = document.getElementById('ai-submit-button');
            if (aiSubmitButton) {
                const aiInput = document.getElementById('ai-input-text');
                const aiSpinner = document.getElementById('ai-spinner');
                const aiModalEl = document.getElementById('aiHelperModal');
                const aiModal = new bootstrap.Modal(aiModalEl);

                aiSubmitButton.addEventListener('click', async function() {
                    const inputText = aiInput.value.trim();
                    if (!inputText) return;

                    aiSpinner.classList.remove('d-none');
                    this.disabled = true;
                    aiInput.disabled = true;

                    try {
                        // Lấy token từ form
                        const token = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value;

                        const response = await fetch('/api/AI/parse-task', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                // Gửi token trong header mà ASP.NET Core đã được cấu hình để đọc
                                'RequestVerificationToken': token
                            },
                            body: JSON.stringify({ text: inputText })
                        });

                        if (!response.ok) {
                            // Phân tích lỗi chi tiết
                            const errorText = await response.text();
                            throw new Error(`Server error (${response.status}): ${errorText}`);
                        }

                        const parsedData = await response.json();

                        aiModal.hide();
                        const queryParams = new URLSearchParams({
                            title: parsedData.title || '',
                            dueDate: parsedData.dueDate ? parsedData.dueDate.split(' ')[0] : '',
                            priority: parsedData.priority || 'None',
                            tags: parsedData.tags ? parsedData.tags.join(', ') : ''
                        }).toString();

                        window.location.href = `/Tasks/Create?${queryParams}`;

                    } catch (error) {
                        console.error('AI Helper Error:', error);
                        Toastify({ text: 'Đã có lỗi xảy ra khi xử lý yêu cầu của bạn.', duration: 5000, style: { background: "linear-gradient(to right, #ff5f6d, #ffc371)"} }).showToast();
                    } finally {
                        aiSpinner.classList.add('d-none');
                        this.disabled = false;
                        aiInput.disabled = false;
                        aiInput.value = '';
                    }
                });
            }

        })(); 
    </script>


    

    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>